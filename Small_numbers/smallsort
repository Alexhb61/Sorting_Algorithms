#Given a list of n numbers between [0,poly(n)]
#Sorts the list in O(logn) depth O(n) work 
#when a semisort can be done in O(logn) depth O(n) work

def smallsort(nums,bitrange) :
    if log(len(nums)) =< 2*len(bitrange) :
        upperrange,lowerrange = break(bitrange) 
        nums = smallsort(nums,lowerrange) ;
        return smallsort(nums,upperrange)
    else:
        m = 2^(len(bitrange))
        l = n/m
        declare node,values = array of empty linked lists.
        parfor i = 0 to l do : 
            semisort(nums[m*i,m*(i+1)],bitrange )
            parfor j = 0 to m do :
                 node[i*m+j].key = nums[i*m+j]
                 node[i*m+j].next = nums[i*m+j] == nums[i*m+j+1] ? node[i*m+j+1] : nil
                 key = nums[i*m +j]
                 if key == nums[i*m+j -1] :
                      values[key*l + j] = node[i*m+j]
        return prune_flatten(values) //remove nodes which have no keys
#Correctness:
This algorithm's top section breaks the bit range in half until the range is O(sqrt(n))
Then it breaks the list into O(sqrt(n)) sized sections & semisorts all the sections.
It then takes the runs in each section and assignes them the appropriate location.
This algorithm can be seen as a parallelization of tinysort.
#runtime:
Depth is logn because it does O(1) flatten, sorts, and prune, and pointer logic.
Work is O(n) because all subroutine are O(n).
